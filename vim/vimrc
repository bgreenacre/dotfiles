set nocompatible
" vim-plug {{{
" Automatically install vim-plug and run PlugInstall if vim-plug not found
" see https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'scrooloose/nerdtree'
Plug 'wincent/command-t'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'w0rp/ale'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-markdown'
Plug 'dyng/ctrlsf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'moll/vim-node'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-shell'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'itmammoth/doorboy.vim'

call plug#end()
" }}}

" Just a simple function to check if a plugin is loaded by vim-plug
function! PlugLoaded(name)
    return (
        \ has_key(g:plugs, a:name) &&
        \ isdirectory(g:plugs[a:name].dir) &&
        \ stridx(&rtp, g:plugs[a:name].dir) >= 0)
endfunction

" Theming {{{

" Color scheme
if filereadable(expand('~/.vim/plugged/dracula/autoload/dracula.vim'))
    colorscheme dracula
endif

if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif
" }}}

"
" Settings {{{

" regular vim only {{{
if !has('nvim')
    set hlsearch
    set incsearch

    " Enable mouse mode working past 220th column
    " https://stackoverflow.com/questions/7000960/in-vim-why-doesnt-my-mouse-work-past-the-220th-column
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
endif
" }}}
"
" enable 256 colors
set t_Co=256
set t_ut=

set mouse=a

" enable matchit plugin which ships with vim and greatly enhances '%'
runtime macros/matchit.vim

" http://damien.lespiau.name/blog/2009/03/18/per-project-vimrc/comment-page-1/
set exrc " enable per-directory .vimrc files

" Make editing sudo required files easier
cmap w!! w !sudo tee % >/dev/null

syntax on

" Show what mode you're currently in
set showmode
" Show what commands you're typing
set showcmd
" Allow modelines
set modeline
" Show current line and column position in file
set ruler
" Highlight column at 80
set colorcolumn=80
" Show matches
set showmatch
" Show file title in terminal tab
set title
" Show line numbers
set number
" Highlight current line
set cursorline
" ignore case when searching...
set ignorecase
" ...except if we input a capital letter
set smartcase

" hides buffer instead of closing them
" http://usevim.com/2012/10/19/vim101-set-hidden/
set hidden

" Tab stuff
set expandtab tabstop=4 shiftwidth=4
set smarttab
set backspace=indent,eol,start
set autoindent
set copyindent
set shiftround

" Show invisible characters
set list
set listchars=tab:▸\ ,trail:·,eol:¬,extends:→,precedes:←,nbsp:･
set showbreak=↪\

" Set split pane direction to be more natural
set splitbelow
set splitright

" wildignore
set wildignore=*.swp,*.bak,*.pyc,*.class,*.so,*.zip,**/bower_components/**,**/node_modules/**,**/dist/**,**/bin/**,**/tmp/**,**/vendor/**

" find - look in nested folders
set path+=..
set wildmenu

set foldlevel=5

" Set encoding and file formats
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,default,latin1
set fileformats=unix,dos

" Set the swap and backups to disable
set nobackup
set noswapfile
set nowritebackup

" Set history and undo
set history=2000
set undolevels=2000

" Set out shell to use bash
set shell=/bin/bash

" Turn off wrapping
set nowrap

" Set bells
set noerrorbells
set visualbell

" Set local to english
setlocal spelllang=en_us

" Always show status line
set laststatus=2

" Show sign column
set signcolumn=yes

" Clipboard settings
if has("macunix") || has('win32')
  set clipboard=unnamed
elseif has("unix")
  set clipboard=unnamedplus
endif

" Fix Vim's ridiculous line wrapping model
set ww=<,>,[,],h,l

set wmw=0
set wmh=0
set conceallevel=3

" rg grep {{{
if executable('rg')
    set grepprg=rg\ --vimgrep
    " filename:line number:column number:message
    set grepformat=%f:%l:%c:%m
endif

if has("persistent_undo")
    set undodir=/tmp
    set undofile
endif
"}}}

"}}}

" Mappings {{{
" remap <Leader> key
let mapleader=","

" remap : to ; to avoid pressing Shift
nnoremap ; :
vnoremap ; :

" Faster vsplit resizing (+,-)
" horizontal split resize can still be achieved with <C-W>+, <C-W>-, <C-W> [n] +
if bufwinnr(1)
    nnoremap + <C-W>>
    nnoremap - <C-W><
endif

" Easy window navigation
nnoremap <C-j> <C-W>j<C-W>_
nnoremap <C-k> <C-W>k<C-W>_
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l
nnoremap <C-e> <C-W>=
nnoremap <C-b> <C-W><bar>
nnoremap <C-d> <end>

" easy copy and pasting
"map <C-P> :set paste<Return>
"map <C-A> :set nopaste<Return>
vmap <C-c> "+y
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" Navigate between display lines
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> k gk
noremap  <silent> j gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End>  <C-o>g<End>
noremap H ^
noremap L g_
noremap J 5j
noremap K 5k

" Allow cursor movements during insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l
inoremap <C-d> <end>

"Reload buffer
nnoremap <Leader>e :e!<CR>

" Buffer navigation
noremap <Leader>] :bnext<CR>
noremap <Leader>[ :bprev<CR>

" Save and quit buffer
noremap <Leader>w :write<CR>
noremap <Leader>q :quit<CR>

" lnext and lprevious
nnoremap <Leader>j :lnext<CR>
nnoremap <Leader>k :lprevious<CR

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" quick vertical split
noremap <leader>v :vsp<CR><C-w><C-w>

nmap <leader>E :Error<CR><C-w>j

" Show commands menu easier
nmap cc :Commands<CR>

" Substitute the word under the cursor.
nmap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

" Auto indent entire file
nnoremap <Leader>= gg=G

if has('win32')
  nmap <leader>t :tab term<CR>
else
  nmap <leader>t :tab term<CR>source $HOME/.bash_profile<CR>clear<CR>
endif
" }}}

" Filetype settings {{{
" Enable file type detection.
" Also load indent files, to automatically do language-dependent indenting.
filetype on
filetype plugin indent on

" Force some file types to be other file types
au BufRead,BufNewFile *.ejs,*.mustache setfiletype html
au BufRead,BufNewFile *.json setfiletype json
au BufRead,BufNewFile *.json.* setfiletype json
au BufNewFile,BufReadPost *.md setfiletype=markdown

" Sync syntax highlight for js files
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" Set js locals
autocmd Filetype javascript,html,handlebars setlocal ts=2 sw=2 sts=2 expandtab cc=120
" }}}

" Plugins Settings {{{
" vim-gitgutter {{{
let g:gitgutter_max_signs = 1000
" }}}

" vim-markdown {{{
" Disable Markdown syntax concealing
" https://github.com/plasticboy/vim-markdown#syntax-concealing
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
" http://www.reddit.com/r/vim/comments/2x5yav/markdown_with_fenced_code_blocks_is_great/
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']
" }}}

" fzf {{{
" Requires ripgrep
" https://github.com/BurntSushi/ripgrep
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --glob "!.git/*"'

" https://github.com/junegunn/fzf.vim/issues/162
let g:fzf_commands_expect = 'enter'

" Open Ggrep results in a quickfix window
autocmd QuickFixCmdPost *grep* cwindow

nmap // :BLines!<CR>
nmap ?? :Rg!<CR>
" }}}

" NERDTree{{{
map <C-t> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeHijackNetrw=0
"let g:WebDevIconsUnicodeDecorateFolderNodes = 0
let g:NERDTreeWinSize=45
" auto delete the buffer of the file you just deleted with NERDTree
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI=1
let NERDTreeIgnore = ['\.pyc$', '\.DS_Store$', '\.swp$', '\.swo$', '\.git$']

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" NERDTress File highlighting
" https://github.com/scrooloose/nerdtree/issues/433#issuecomment-92590696
" https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

augroup nerdtree
    autocmd!
    " open NERDTree automatically on vim start, even if no file is specified
    " focus back on main window after
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree |
        \ wincmd p | endif

    " If more than one window and previous buffer was NERDTree, go back to it.
    autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

    " If more than one window and previous buffer was NERDTree, go back to it.
    autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

    " Close vim if nerdtree is the only open buffer
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    autocmd FileType nerdtree setlocal nolist

    call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('properties', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('rc', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('ignore', 'yellow', 'none', 'yellow', '#f1fa8c')
    call NERDTreeHighlightFile('yml', '177', 'none', '#d787ff', '#f1fa8c')
    call NERDTreeHighlightFile('yaml', '177', 'none', '#d787ff', '#f1fa8c')
    call NERDTreeHighlightFile('md', '135', 'none', '#af5fff', '#f1fa8c')
    call NERDTreeHighlightFile('html', '202', 'none', '#ff5f00', '#f1fa8c')
    call NERDTreeHighlightFile('hbs', '203', 'none', '#ff5f5f', '#f1fa8c')
    call NERDTreeHighlightFile('css', '159', 'none', '#afffff', '#f1fa8c')
    call NERDTreeHighlightFile('js', '172', 'none', '#d78700', '#f1fa8c')
    call NERDTreeHighlightFile('php', '027', 'none', '#005fff', '#f1fa8c')
    call NERDTreeHighlightFile('log', '240', 'none', '#585858', '#f1fa8c')
    call NERDTreeHighlightFile('sh', '117', 'none', '#87d7ff', '#f1fa8c')
    call NERDTreeHighlightFile('xml', '158', 'none', '#afffd7', '#f1fa8c')
    call NERDTreeHighlightFile('java', '141', 'none', '#af87ff', '#f1fa8c')
augroup END
" }}}

" ale {{{
autocmd BufEnter dist/* ALEDisableBuffer
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_completion_enabled = 1
let g:ale_completion_delay = 1000
" navigate to next/ previous error
nmap <silent> <C-n> <Plug>(ale_previous_wrap)
nmap <silent> <C-m> <Plug>(ale_next_wrap)

" :help ale_linters
let g:ale_linters = {
            \'python': ['pycodestyle'],
            \'javascript': ['eslint']
            \}

let g:ale_fixers = {
            \'python': ['black'],
            \'javascript': ['prettier'],
            \'ruby': ['rubocop'],
            \}

let g:ale_python_black_options = '-l 80'
" }}}

" fugitive {{{
" Set status line to include git branch
if PlugLoaded('vim-fugitive')
    set statusline=%f\ %{fugitive#statusline()}%r%m%=%c,%l/%L\ %P
    set autoread
endif

" }}}

" vim-shell {{{
" https://github.com/xolox/vim-shell#the-gshell_fullscreen_items-option
let g:shell_fullscreen_items = "mT"
let g:shell_fullscreen_always_on_top = 0
" }}}

" ctrlsf {{{
if has("macunix")
  let g:ctrlsf_ackprg = '/usr/local/bin/rg'
elseif has("unix")
  let g:ctrlsf_ackprg = '/usr/bin/rg'
endif

let g:ctrlp_working_path_mode = 0
let g:ctrlp_by_filename = 0
let g:ctrlp_regexp_search = 0
let g:ctrlp_use_caching = 1
let g:ctrlsf_winsize = '33%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
let g:ctrlsf_auto_focus = {
    \ 'at': 'start',
    \ }

nmap <leader>a :CtrlSF -R ""<Left>
nmap <leader>A <Plug>CtrlSFCwordPath -W<CR>
nmap <leader>c :CtrlSFFocus<CR>
nmap <leader>C :CtrlSFToggle<CR>

" Open Ggrep results in a quickfix window
autocmd QuickFixCmdPost *grep* cwindow
" }}}

" vim-multiple-cursors {{{
let g:multi_cursor_start_word_key = '<C-d>'
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
" }}}

" }}}

" Misc {{{
" add folding for different filetypes {{{
augroup folding
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType javascript setlocal foldmethod=syntax
augroup END

augroup misc
    autocmd!
    " resize windows on terminal size change
    autocmd VimResized * Tabdo wincmd =
    " Keeping this here even backups are disabled just in case I ever enable it
    " don't create swap files for files in the Dropbox folder
    " taken from https://gist.github.com/frangio/985684
    autocmd BufNewFile,BufRead *
        \ if expand('%:~') =~ '^\~/Dropbox' |
        \   set noswapfile |
        \ else |
        \   set swapfile |
        \ endif

    " crontab
    autocmd filetype crontab setlocal nobackup nowritebackup
augroup END

set errorformat+=%f[%l\\,%c]:\ %m,%m

" local (gitignored) settings
if filereadable(expand('$HOME/.local.vim'))
    source $HOME/.local.vim
endif

" }}}

set secure
