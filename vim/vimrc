" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible              " be iMproved, required
filetype off                  " required

" Set some global vim defaults
syntax enable
set hidden
set encoding=UTF-8
set termencoding=utf-8
set backspace=indent,eol,start
set fileencodings=ucs-bom,utf-8,default,latin1
set fileformats=unix,dos
set history=2000
set undolevels=2000
set wildignore=*.swp,*.bak,*.pyc,*.class
set title
set ruler
set number
set mouse=a
set noerrorbells
set visualbell
set nobackup
set noswapfile
set nowritebackup
set showmatch
set laststatus=2
set nowrap
set autoindent
set copyindent
"set smartindent
set expandtab tabstop=4 shiftwidth=4
set shiftround
set smartcase
set ignorecase
set smarttab
set hlsearch
set incsearch
set wmw=0
set wmh=0
set shell=/bin/bash
set signcolumn=yes
setlocal spelllang=en_us
nnoremap ; :

" enable matchit plugin which ships with vim and greatly enhances '%'
runtime macros/matchit.vim

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundles/Vundle.vim
call vundle#begin('~/.vim/bundles')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'preservim/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'wincent/command-t'
"Plugin 'vim-scripts/php.vim--Garvin'
"Plugin 'phpvim/phpcd.vim', { 'for': 'php' , 'do': 'composer update' }
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'sheerun/vim-polyglot'
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-surround'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'w0rp/ale'
Plugin 'styled-components/vim-styled-components'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-markdown'
Plugin 'dyng/ctrlsf.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'moll/vim-node'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-shell'
Plugin 'pechorin/any-jump.vim'
Plugin 'ryanoasis/vim-devicons'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Color scheme
colorscheme dracula

" http://damien.lespiau.name/blog/2009/03/18/per-project-vimrc/comment-page-1/
set exrc " enable per-directory .vimrc files
set secure " disable unsafe commands in local .vimrc files

" Force some file types to be other file types
au BufRead,BufNewFile *.ejs,*.mustache setfiletype html
au BufRead,BufNewFile *.json setfiletype json
au BufRead,BufNewFile *.json.* setfiletype json

" http://www.reddit.com/r/vim/comments/2x5yav/markdown_with_fenced_code_blocks_is_great/
au BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']

set wildignore+=**/bower_components/**,**/node_modules/**,**/dist/**,**/bin/**,**/tmp/**

let g:ctrlp_working_path_mode = 0
let g:ctrlp_by_filename = 0
let g:ctrlp_regexp_search = 0
let g:ctrlp_use_caching = 1

" https://github.com/xolox/vim-shell#the-gshell_fullscreen_items-option
let g:shell_fullscreen_items = "mT"
let g:shell_fullscreen_always_on_top = 0

if has("macunix") || has('win32')
  set clipboard=unnamed
elseif has("unix")
  set clipboard=unnamedplus
endif

" Enable file type detection.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" change the mapleader from \ to ,
let mapleader=","

nmap <leader>E :Error<CR><C-w>j

" Requires ripgrep
" https://github.com/BurntSushi/ripgrep
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --glob "!.git/*"'

if has('win32')
  " Disable preview on Windows since it doesn't really work
  let g:fzf_preview_window = ''
else
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
endif


nmap // :BLines!<CR>
nmap ?? :Rg!<CR>

" https://github.com/junegunn/fzf.vim/issues/162
let g:fzf_commands_expect = 'enter'

" Find files with fzf
nmap <leader>p :Files!<CR>

" Shows Git history for the current buffer
command! FileHistory execute ":BCommits!"

nmap cc :Commands<CR>

autocmd Filetype javascript,html setlocal ts=2 sw=2 sts=2 expandtab

" Easy window navigation
no <C-j> <C-W>j<C-W>_
no <C-k> <C-W>k<C-W>_
no <C-h> <C-W>h
no <C-l> <C-W>l
no <C-e> <C-W>=
no <C-b> <C-W><bar>
no <C-d> <end>

" easy pasting
map <C-P> :set paste<Return>
map <C-A> :set nopaste<Return>

" Navigate between display lines
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> k gk
noremap  <silent> j gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End>  <C-o>g<End>
noremap H ^
noremap L g_
noremap J 5j
noremap K 5k

" Allow cursor movements during insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l
inoremap <C-d> <end>

" Copy to clipboard
vnoremap <C-c> "*y<CR>

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" quick vertical split
noremap <leader>v :vsp<CR><C-w><C-w>

" Multicursor settings
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'

" Show evil tabs
"set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
"autocmd filetype html,xml set listchars-=tab:>.

" Make editing sudo required files easier
cmap w!! w !sudo tee % >/dev/null

" Set status line to include git branch
set statusline=%f\ %{fugitive#statusline()}%r%m%=%c,%l/%L\ %P
set autoread

" Automaticaly open NERDTree if no file is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" If more than one window and previous buffer was NERDTree, go back to it.
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

autocmd FileType nerdtree setlocal nolist

map <C-t> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeHijackNetrw=1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:NERDTreeWinSize=45
let g:NERDTreeAutoDeleteBuffer=1
let NERDTreeMinimalUI=1
let NERDTreeCascadeSingleChildDir=1
let g:NERDTreeHeader = 'hello'
let g:NERDTreeShowIgnoredStatus = 0

let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''

" Sync syntax highlight for js files
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" Substitute the word under the cursor.
nmap <leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

if has("macunix")
  let g:ctrlsf_ackprg = '/usr/local/bin/rg'
elseif has("unix")
  let g:ctrlsf_ackprg = '/usr/bin/rg'
endif

let g:ctrlsf_winsize = '33%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
let g:ctrlsf_auto_focus = {
    \ 'at': 'start',
    \ }

nmap <leader>a :CtrlSF -R ""<Left>
nmap <leader>A <Plug>CtrlSFCwordPath -W<CR>
nmap <leader>c :CtrlSFFocus<CR>
nmap <leader>C :CtrlSFToggle<CR>

" Open Ggrep results in a quickfix window
autocmd QuickFixCmdPost *grep* cwindow

" Fix Vim's ridiculous line wrapping model
set ww=<,>,[,],h,l

if has('win32')
  nmap <leader>t :tab term<CR>
else
  nmap <leader>t :tab term<CR>source $HOME/.bash_profile<CR>clear<CR>
endif

let g:ale_linters = {
\   'javascript': ['eslint'],
\}


nmap <silent> <C-n> <Plug>(ale_previous_wrap)
nmap <silent> <C-m> <Plug>(ale_next_wrap)

autocmd BufEnter dist/* ALEDisableBuffer

" Resize splits in all tabs upon window resize
" https://vi.stackexchange.com/a/206
autocmd VimResized * Tabdo wincmd =
